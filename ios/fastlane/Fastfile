# frozen_string_literal: true

import '../../fastlane/common.rb'

def get_project_xcode_version
  get_version_number(
    xcodeproj: ENV['MAIN_PROJECT'],
    target: ENV['GYM_SCHEME']
  )
end

# Build the app with correct distribution signing
def build(adhoc: false)
  # fetch the latest certificates and provisioning profile
  # todo: use match to automatically sync certs and profiles
  get_certificates(generate_apple_certs: true)
  get_provisioning_profile(adhoc: adhoc)

  # set version number and build number
  update_app_version_numbers

  # set xcode project to use the correct certificate and profile
  update_code_signing_settings(
    use_automatic_signing: false,
    code_sign_identity: 'iPhone Distribution',
    profile_name: lane_context[SharedValues::SIGH_NAME]
  )

  # install pods
  cocoapods

  # check for pod cache (derived data)
  scheme = ENV['GYM_SCHEME']
  build_configuration = 'Release'

  Dir.chdir('..') do
    ios_derived_data_path = File.expand_path('.local_derived_data')
    cache_dir = File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/BuildProductsPath/#{build_configuration}-iphoneos")

    puts "derived data dir = #{ios_derived_data_path}"
    puts "cache dir = #{cache_dir}"

    if File.exist?(cache_dir)

      # build with pod cache
      puts 'using cached derived data'

      fastlane_require 'xcodeproj'
      project = Xcodeproj::Project.open(ENV['MAIN_PROJECT'])
      target = project.targets.select { |target| target.name == scheme }.first
      phase = target.shell_script_build_phases.select do |phase|
        phase.name && phase.name.include?('Copy Pods Resources')
      end.first
      unless phase.shell_script.start_with?('BUILT_PRODUCTS_DIR')
        phase.shell_script = "BUILT_PRODUCTS_DIR=#{cache_dir} #{phase.shell_script}"
        project.save
      end

      gym(
        silent: false,
        export_method: adhoc ? 'ad-hoc' : 'app-store',
        suppress_xcode_output: true,
        include_symbols: true,
        include_bitcode: true,
        project: "ios/#{ENV['MAIN_PROJECT']}",
        scheme: scheme,
        buildlog_path: 'ios/.build_logs',
        configuration: build_configuration,
        output_directory: 'ios',
        xcargs: [
          "PODS_CONFIGURATION_BUILD_DIR=#{cache_dir}",
          "FRAMEWORK_SEARCH_PATHS='#{cache_dir} $(inherited)'",
          "LIBRARY_SEARCH_PATHS='#{cache_dir} $(inherited)'",
          "SWIFT_INCLUDE_PATHS=#{cache_dir}"
        ].join(' ')
      )

    else

      # full build
      puts 'performing full build (no derived data cache)'

      build_app(
        silent: false,
        export_method: adhoc ? 'ad-hoc' : 'app-store',
        suppress_xcode_output: true,
        include_symbols: true,
        include_bitcode: true,
        buildlog_path: 'ios/.build_logs',
        workspace: "ios/#{ENV['MAIN_WORKSPACE']}",
        derived_data_path: ios_derived_data_path,
        configuration: build_configuration,
        output_directory: 'ios'
      )

      # remove misc artifacts to reduce cache size
      require 'fileutils'
      dirs = [
        File.expand_path("#{ios_derived_data_path}/info.plist"),
        File.expand_path("#{ios_derived_data_path}/Logs"),
        File.expand_path("#{ios_derived_data_path}/SourcePackages"),
        File.expand_path("#{ios_derived_data_path}/ModuleCache.noindex"),
        File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/IntermediateBuildFilesPath/#{scheme}.build"),
        File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/IntermediateBuildFilesPath/XCBuildData"),
        File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/BuildProductsPath/SwiftSupport"),
        File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/PrecompiledHeaders")
      ]
      dirs.each { |dir| FileUtils.rm_rf(dir) }
    end
  end
end

def parse_latest_testflight_build_number(version_string)
  latest_build_number = latest_testflight_build_number(version: version_string, initial_build_number: 0)
  begin
    Integer(latest_build_number)
  rescue StandardError
    UI.important "unable to parse latest testflight build number (#{latest_build_number}) - defaulting to 0"
    0
  end
end

# Update app version number and build number based on branch name following semantic versioning (falls back to highest of latest testflight vs xcode project version)
def update_app_version_numbers
  version_string = ENV['FORCED_VERSION_NUMBER_STRING']
  xcode_project_version = nil

  if !version_string.nil? && version_string.length > 0

    puts "using forced version \"#{version_string}\""

  else

    version_string = get_semver_from_branch(ENV['GIT_HEAD_REF'])

    if version_string.nil?

      app_store_build_number(live: false)
      latest_app_store_version = lane_context[SharedValues::LATEST_VERSION]
      xcode_project_version = get_project_xcode_version

      # use largest version (note ascii comparison - not sure if accurate enough)
      version_string = latest_app_store_version > xcode_project_version ? latest_app_store_version : xcode_project_version
      puts "using version #{version_string} (latest app store = #{latest_app_store_version}, project version = #{xcode_project_version})"

    end

  end

  # increment build number
  forced_build_number = ENV['FORCED_BUILD_NUMBER']
  if forced_build_number.nil? || forced_build_number.empty?
    current_build_number = parse_latest_testflight_build_number(version_string)

    if current_build_number == 0
      if m = version_string.match(semver_regex)
        # if no existing number was found we need to check variations of the same version
        # since Apple handles 1, 1.0, and 1.0.0 independently, but they share build number
        puts "build number is 0 - checking version variations in case there's a match"

        major = m.captures[0]
        minor = m.captures[1]
        patch = m.captures[2]

        puts "major=#{major} minor=#{minor} patch=#{patch}"
        if patch == '0'
          variation = "#{major}.#{minor}"
          current_build_number = latest_testflight_build_number(version: variation, initial_build_number: 0)
          puts "variation \"#{variation}\" = #{current_build_number}"

          if current_build_number == 0 && minor == '0'
            variation = major
            current_build_number = latest_testflight_build_number(version: variation, initial_build_number: 0)
            puts "variation \"#{variation}\" = #{current_build_number}"
          end
        end
      else
        UI.important 'build number is 0 and version is not semantically correct - unable to check version variations (build number may be incorrect)'
      end

    end

    build_number = current_build_number + 1
    increment_build_number(build_number: build_number)
  else
    puts "using forced build number \"#{forced_build_number}\""
    build_number = forced_build_number
    increment_build_number(build_number: build_number)
  end

  # set version number
  current_version_string = xcode_project_version || get_project_xcode_version
  increment_version_number(version_number: version_string)
  update_package_version(version_string)

  puts "build_number #{current_build_number} => #{build_number}"
  puts "version_number #{current_version_string} => #{version_string}"
end

platform :ios do
  before_all do |_lane, _options|
    xcversion(version: '~> 13.4')

    app_store_connect_api_key(
      key_content: ENV['CONNECT_API_KEY_CONTENT'],
      in_house: false
    )
  end

  desc 'Build an ad-hoc ipa'
  lane :build_adhoc do
    build(adhoc: true)
  end

  desc 'Build and upload to Testflight'
  lane :build do
    build(adhoc: false)

    changelog_to_use = changelog
    puts "changelog=#{changelog_to_use}"

    # upload
    if ENV['PERFORM_LONG_UPLOAD'] == 'true'
      puts 'performing long upload (will wait for processing and notify testers)'
      upload_to_testflight(
        skip_submission: false,
        notify_external_testers: true,
        changelog: changelog_to_use,
        skip_waiting_for_build_processing: false,
        groups: 'CD Builds'
      )
    else
      puts 'performing short upload (will only wait for changelog processing and will not notify testers)'
      upload_to_testflight(
        skip_submission: true,
        notify_external_testers: false,
        changelog: changelog_to_use,
        skip_waiting_for_build_processing: true
      )
    end
  end
end
